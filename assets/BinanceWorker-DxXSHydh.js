const f="wss://stream.binance.com:9443/ws/!ticker@arr",i="https://api.binance.com/api/v3";async function p(){try{const r=await(await fetch(`${i}/exchangeInfo`)).json();if(!r.symbols)throw new Error("Failed to fetch symbols list");return r.symbols.filter(o=>o.symbol.endsWith("USDT")&&o.status==="TRADING").map(o=>o.symbol)}catch(e){return console.error("Error fetching symbols list:",e),[]}}async function u(e){const r=`${i}/klines?symbol=${e}&interval=1d&limit=2`;try{const o=await(await fetch(r)).json();if(!Array.isArray(o)||o.length<2)throw new Error(`No sufficient data for ${e}`);const n=o.length>=2?o[1][1]:o[0][1],t=o.length>=2?o[1][4]:o[0][4];return{symbol:e,openPrice:n,curPrice:t}}catch(s){return console.error(`Error fetching data for ${e}:`,s),{symbol:e,openPrice:null,curPrice:null}}}async function y(e){const r=await p();if(r.length===0){console.error("No symbols available.");return}console.log(`Fetching open prices for ${r.length} symbols...`),(await Promise.all(r.map(u))).forEach(o=>{let n="#FFFFFF";const t=parseFloat(o.curPrice),c=parseFloat(o.openPrice);c<t?n="#f75467":c>t&&(n="#4386f9"),e[o.symbol]={price:t,color:n,openPrice:c}})}function h(e,r){e.forEach(s=>{const{symbol:o,price:n,openPrice:t}=b(s);if(r[o]){const c=g(r[o].openPrice,n);r[o].price=n,r[o].color=c,t&&(r[o].openPrice=t)}})}function b(e){if("s"in e&&"c"in e)return{symbol:e.s,price:parseFloat(e.c)};if("code"in e&&"trade_price"in e)return{symbol:e.code,price:e.trade_price,openPrice:e.opening_price};throw new Error("Unknown data type")}function g(e,r){let s="#FFFFFF";return e<r?s="#f75467":e>r&&(s="#4386f9"),s}const a={};let l=null;y(a);const m=()=>{l=new WebSocket(f),l.onmessage=e=>{const r=JSON.parse(e.data),s=Array.from(r).filter(o=>o.s.includes("USDT"));try{h(s,a)}catch(o){self.postMessage(`데이터 정리 오류: ${o}`)}self.postMessage({type:"symbolData",data:a})},l.onclose=()=>{self.postMessage("연결 끊김")}};self.onmessage=()=>{};m();
