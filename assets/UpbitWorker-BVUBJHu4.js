const c=[];for(let e=0;e<256;++e)c.push((e+256).toString(16).slice(1));function f(e,t=0){return(c[e[t+0]]+c[e[t+1]]+c[e[t+2]]+c[e[t+3]]+"-"+c[e[t+4]]+c[e[t+5]]+"-"+c[e[t+6]]+c[e[t+7]]+"-"+c[e[t+8]]+c[e[t+9]]+"-"+c[e[t+10]]+c[e[t+11]]+c[e[t+12]]+c[e[t+13]]+c[e[t+14]]+c[e[t+15]]).toLowerCase()}let a;const g=new Uint8Array(16);function m(){if(!a){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");a=crypto.getRandomValues.bind(crypto)}return a(g)}const k=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);var p={randomUUID:k};function w(e,t,n){var s;if(p.randomUUID&&!e)return p.randomUUID();e=e||{};const o=e.random??((s=e.rng)==null?void 0:s.call(e))??m();if(o.length<16)throw new Error("Random bytes length must be >= 16");return o[6]=o[6]&15|64,o[8]=o[8]&63|128,f(o)}async function y(){const e=encodeURIComponent("https://api.upbit.com/v1/market/all?isDetails=true"),t=await fetch(`https://proxy-server-flax-rho.vercel.app/api/proxy?url=${e}`),n=await t.json();if(t.status!==200)throw new Error("Failed to fetch symbols list");return n.filter(s=>s.market.startsWith("KRW-"))}async function d(e,t){if(t.length===0){console.error("No symbols available.");return}console.log(`Fetching open prices for ${t.length} symbols...`),t.forEach(n=>{e[n.market]={price:0,color:"#FFFFFF",openPrice:0}})}function U(e,t){e.forEach(n=>{const{symbol:o,price:s,openPrice:l}=F(n);if(t[o]){const b=h(t[o].openPrice,s);t[o].price=s,t[o].color=b,l&&(t[o].openPrice=l)}})}function F(e){if("s"in e&&"c"in e)return{symbol:e.s,price:parseFloat(e.c)};if("code"in e&&"trade_price"in e)return{symbol:e.code,price:e.trade_price,openPrice:e.opening_price};throw new Error("Unknown data type")}function h(e,t){let n="#FFFFFF";return e<t?n="#f75467":e>t&&(n="#4386f9"),n}async function S(){try{const e=await fetch("https://ipapi.co/json/"),{country_code:t}=await e.json();return t!=="US"}catch(e){return console.error("Failed to detect country from IP:",e),!1}}function v(e,t){const n=[];for(let o=0;o<e.length;o+=t)n.push(e.slice(o,o+t));return n}async function x(e){const t=e.join(","),n=encodeURIComponent(`https://api.upbit.com/v1/ticker?markets=${t}`);return(await fetch(`https://proxy-server-flax-rho.vercel.app/api/proxy?url=${n}`)).json()}async function I(e){const t=v(e,100);return(await Promise.all(t.map(x))).flat()}const i={};let r=null;const _=()=>{r=new WebSocket("wss://api.upbit.com/websocket/v1/ticker"),r.binaryType="arraybuffer",r.onopen=()=>{console.log("Connected"),(async()=>{const t=await y();self.postMessage({type:"upbit_symbol_list",data:t}),d(i,t).then(()=>{const n=[{ticket:w()},{type:"ticker",codes:Object.keys(i)}];r==null||r.send(JSON.stringify(n))})})()},r.onmessage=e=>{const n=new TextDecoder("utf-8").decode(e.data),o=JSON.parse(n);try{U([o],i)}catch(s){self.postMessage(`upbit 데이터 정리 오류: ${s}`)}self.postMessage({type:"UpbitsymbolData",data:{...i[o.code],symbol:o.code}})},r.onclose=()=>{self.postMessage("연결 끊김")}},u=e=>{I(e).then(t=>{t.forEach(n=>{const o=i[n.market];o.openPrice=n.opening_price,o.price=n.trade_price,o.color=h(n.opening_price,n.trade_price)})}),self.postMessage({type:"UpbitRestsymbolData",data:i})},P=(e,t=1e3)=>{u(e),setInterval(()=>{u(e)},t)},R=async()=>{if(await S())_();else{const t=await y();self.postMessage({type:"upbit_symbol_list",data:t}),await d(i,t);const n=Object.keys(i);P(n)}};R();
