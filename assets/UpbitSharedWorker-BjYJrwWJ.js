const c=[];for(let e=0;e<256;++e)c.push((e+256).toString(16).slice(1));function T(e,t=0){return(c[e[t+0]]+c[e[t+1]]+c[e[t+2]]+c[e[t+3]]+"-"+c[e[t+4]]+c[e[t+5]]+"-"+c[e[t+6]]+c[e[t+7]]+"-"+c[e[t+8]]+c[e[t+9]]+"-"+c[e[t+10]]+c[e[t+11]]+c[e[t+12]]+c[e[t+13]]+c[e[t+14]]+c[e[t+15]]).toLowerCase()}let u;const U=new Uint8Array(16);function A(){if(!u){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");u=crypto.getRandomValues.bind(crypto)}return u(U)}const m=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);var h={randomUUID:m};function I(e,t,o){var r;if(h.randomUUID&&!e)return h.randomUUID();e=e||{};const n=e.random??((r=e.rng)==null?void 0:r.call(e))??A();if(n.length<16)throw new Error("Random bytes length must be >= 16");return n[6]=n[6]&15|64,n[8]=n[8]&63|128,T(n)}async function _(){const e=encodeURIComponent("https://api.upbit.com/v1/market/all?isDetails=true"),t=await fetch(`https://proxy-server-flax-rho.vercel.app/api/proxy?url=${e}`),o=await t.json();if(t.status!==200)throw new Error("Failed to fetch symbols list");return o.filter(r=>r.market.startsWith("KRW-"))}async function g(e,t){if(t.length===0){console.error("No symbols available.");return}console.log(`Fetching open prices for ${t.length} symbols...`),t.forEach(o=>{e[o.market]={price:0,color:"#FFFFFF",openPrice:0}})}let y="";function B(e,t){e.forEach(o=>{const{symbol:n,price:r,openPrice:p}=P(o);if(t[n]){const b=S(t[n].openPrice,r);t[n].price=r,t[n].color=b,p&&(t[n].openPrice=p)}})}function P(e){if("s"in e&&"c"in e)return{symbol:e.s,price:parseFloat(e.c)};if("code"in e&&"trade_price"in e)return{symbol:e.code,price:e.trade_price,openPrice:e.opening_price};throw new Error("Unknown data type")}function S(e,t){let o="#FFFFFF";return e<t?o="#f75467":e>t&&(o="#4386f9"),o}async function w(){if(y.length===0)try{const e=await fetch("https://proxy-server-flax-rho.vercel.app/api/proxy?locale=find"),{country:t}=await e.json();return y=t,t==="US"}catch(e){return console.error("Failed to detect country from IP:",e),!1}else return y==="US"}function E(e,t){const o=[];for(let n=0;n<e.length;n+=t)o.push(e.slice(n,n+t));return o}async function k(e){const t=e.join(","),o=encodeURIComponent(`https://api.upbit.com/v1/ticker?markets=${t}`);return(await fetch(`https://proxy-server-flax-rho.vercel.app/api/proxy?url=${o}`)).json()}async function D(e){const t=E(e,100);return(await Promise.all(t.map(k))).flat()}const R="wss://api.upbit.com/websocket/v1/";var l=(e=>(e.UPBIT_SYMBOL_LIST="UPBIT_SYMBOL_LIST",e.UPBIT_SYMBOL_TRADE_DATA="UPBIT_SYMBOL_TRADE_DATA",e.UPBIT_SYMBOLS_RESTAPI_TRADE_DATA="UPBIT_SYMBOLS_RESTAPI_TRADE_DATA",e.BINANCE_SYMBOLS_DATA="BINANCE_SYMBOLS_DATA",e))(l||{});const L=self,i=[],s={};let d=[],a=null;const O=()=>{a=new WebSocket(`${R}ticker`),a.binaryType="arraybuffer",a.onopen=()=>{console.log("Connected"),(async()=>{const t=await _();d=t,i.forEach(o=>{o.postMessage({type:l.UPBIT_SYMBOL_LIST,data:t})}),g(s,t).then(()=>{const o=[{ticket:I()},{type:"ticker",codes:Object.keys(s)}];a==null||a.send(JSON.stringify(o))})})()},a.onmessage=e=>{const o=new TextDecoder("utf-8").decode(e.data),n=JSON.parse(o);try{B([n],s)}catch(r){i.forEach(p=>{p.postMessage(`upbit 데이터 정리 오류: ${r}`)})}i.forEach(r=>{r.postMessage({type:l.UPBIT_SYMBOL_TRADE_DATA,data:{...s[n.code],symbol:n.code}})})},a.onclose=()=>{i.forEach(e=>{e.postMessage("연결 끊김")})}};L.onconnect=e=>{const t=e.ports[0];i.push(t),t.onmessage=o=>{console.log("Received from client:",o.data)},d.length>0&&t.postMessage({type:"upbit_symbol_list",data:d}),Object.keys(s).length>0&&t.postMessage({type:"UpbitsymbolData",data:s}),i.forEach(o=>{o.postMessage("유저가 추가됨")}),t.start()};const f=e=>{D(e).then(t=>{t.forEach(o=>{const n=s[o.market];n.openPrice=o.opening_price,n.price=o.trade_price,n.color=S(o.opening_price,o.trade_price)})}),i.forEach(t=>{t.postMessage({type:l.UPBIT_SYMBOLS_RESTAPI_TRADE_DATA,data:s})})},v=(e,t=1e3)=>{f(e),setInterval(()=>{f(e)},t)},M=async()=>{if(await w())O();else{const t=await _();i.forEach(n=>{n.postMessage({type:l.UPBIT_SYMBOL_LIST,data:t})}),await g(s,t);const o=Object.keys(s);v(o)}};M();
