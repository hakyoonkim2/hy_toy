const I="wss://api.upbit.com/websocket/v1/";var l=(e=>(e.UPBIT_SYMBOL_LIST="UPBIT_SYMBOL_LIST",e.UPBIT_SYMBOL_TRADE_DATA="UPBIT_SYMBOL_TRADE_DATA",e.UPBIT_SYMBOLS_RESTAPI_TRADE_DATA="UPBIT_SYMBOLS_RESTAPI_TRADE_DATA",e.BINANCE_SYMBOLS_DATA="BINANCE_SYMBOLS_DATA",e))(l||{});async function g(){const e=encodeURIComponent("https://api.upbit.com/v1/market/all?isDetails=true"),t=await fetch(`https://proxy-server-flax-rho.vercel.app/api/proxy?url=${e}`),n=await t.json();if(t.status!==200)throw new Error("Failed to fetch symbols list");return n.filter(c=>c.market.startsWith("KRW-"))}async function U(e,t){if(t.length===0){console.error("No symbols available.");return}console.log(`Fetching open prices for ${t.length} symbols...`),t.forEach(n=>{e[n.market]={price:0,color:"#FFFFFF",openPrice:0}})}let u="";function m(e,t,n){e.forEach(o=>{const{symbol:c,price:p,openPrice:_}=B(o);if(t[c]){const b=A(t[c].openPrice,p);t[c].price=p,t[c].color=b,_&&(t[c].openPrice=_),n[c]||(n[c]=t[c])}})}function B(e){if("s"in e&&"c"in e)return{symbol:e.s,price:parseFloat(e.c)};if("code"in e&&"trade_price"in e)return{symbol:e.code,price:e.trade_price,openPrice:e.opening_price};throw new Error("Unknown data type")}function A(e,t){let n="#FFFFFF";return e<t?n="#f75467":e>t&&(n="#4386f9"),n}async function P(){if(u.length===0)try{const e=await fetch("https://proxy-server-flax-rho.vercel.app/api/proxy?locale=find"),{country:t}=await e.json();return u=t,t==="US"}catch(e){return console.error("Failed to detect country from IP:",e),!1}else return u==="US"}function E(e,t){const n=[];for(let o=0;o<e.length;o+=t)n.push(e.slice(o,o+t));return n}async function w(e){const t=e.join(","),n=encodeURIComponent(`https://api.upbit.com/v1/ticker?markets=${t}`);return(await fetch(`https://proxy-server-flax-rho.vercel.app/api/proxy?url=${n}`)).json()}async function k(e){const t=E(e,100);return(await Promise.all(t.map(w))).flat()}const r=[];for(let e=0;e<256;++e)r.push((e+256).toString(16).slice(1));function D(e,t=0){return(r[e[t+0]]+r[e[t+1]]+r[e[t+2]]+r[e[t+3]]+"-"+r[e[t+4]]+r[e[t+5]]+"-"+r[e[t+6]]+r[e[t+7]]+"-"+r[e[t+8]]+r[e[t+9]]+"-"+r[e[t+10]]+r[e[t+11]]+r[e[t+12]]+r[e[t+13]]+r[e[t+14]]+r[e[t+15]]).toLowerCase()}let y;const L=new Uint8Array(16);function R(){if(!y){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");y=crypto.getRandomValues.bind(crypto)}return y(L)}const O=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);var T={randomUUID:O};function M(e,t,n){var c;if(T.randomUUID&&!e)return T.randomUUID();e=e||{};const o=e.random??((c=e.rng)==null?void 0:c.call(e))??R();if(o.length<16)throw new Error("Random bytes length must be >= 16");return o[6]=o[6]&15|64,o[8]=o[8]&63|128,D(o)}const v=self,i=[],s={};let f=[],a=null,d=null,h={};const x=()=>{a=new WebSocket(`${I}ticker`),a.binaryType="arraybuffer",a.onopen=()=>{console.log("Connected"),(async()=>{const t=await g();f=t,i.forEach(n=>{n.postMessage({type:l.UPBIT_SYMBOL_LIST,data:t})}),U(s,t).then(()=>{const n=[{ticket:M()},{type:"ticker",codes:Object.keys(s)}];a==null||a.send(JSON.stringify(n))})})()},a.onmessage=e=>{const n=new TextDecoder("utf-8").decode(e.data),o=JSON.parse(n);try{m([o],s,h)}catch(c){i.forEach(p=>{p.postMessage(`upbit 데이터 정리 오류: ${c}`)})}d||(d=setTimeout(()=>{i.forEach(c=>{c.postMessage({type:l.UPBIT_SYMBOL_TRADE_DATA,data:h})}),h={},d=null},300))},a.onclose=()=>{i.forEach(e=>{e.postMessage("연결 끊김")})}};v.onconnect=e=>{const t=e.ports[0];i.push(t),t.onmessage=n=>{console.log("Received from client:",n.data)},f.length>0&&t.postMessage({type:l.UPBIT_SYMBOL_LIST,data:f}),Object.keys(s).length>0&&t.postMessage({type:l.UPBIT_SYMBOL_TRADE_DATA,data:s}),i.forEach(n=>{n.postMessage("유저가 추가됨")}),t.start()};const S=e=>{k(e).then(t=>{t.forEach(n=>{const o=s[n.market];o.openPrice=n.opening_price,o.price=n.trade_price,o.color=A(n.opening_price,n.trade_price)})}),i.forEach(t=>{t.postMessage({type:l.UPBIT_SYMBOLS_RESTAPI_TRADE_DATA,data:s})})},F=(e,t=300)=>{S(e),setInterval(()=>{S(e)},t)},Y=async()=>{if(!await P())x();else{const t=await g();i.forEach(o=>{o.postMessage({type:l.UPBIT_SYMBOL_LIST,data:t})}),await U(s,t);const n=Object.keys(s);F(n)}};Y();
