const c=[];for(let t=0;t<256;++t)c.push((t+256).toString(16).slice(1));function m(t,e=0){return(c[t[e+0]]+c[t[e+1]]+c[t[e+2]]+c[t[e+3]]+"-"+c[t[e+4]]+c[t[e+5]]+"-"+c[t[e+6]]+c[t[e+7]]+"-"+c[t[e+8]]+c[t[e+9]]+"-"+c[t[e+10]]+c[t[e+11]]+c[t[e+12]]+c[t[e+13]]+c[t[e+14]]+c[t[e+15]]).toLowerCase()}let p;const k=new Uint8Array(16);function w(){if(!p){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");p=crypto.getRandomValues.bind(crypto)}return p(k)}const U=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);var y={randomUUID:U};function F(t,e,o){var s;if(y.randomUUID&&!t)return y.randomUUID();t=t||{};const n=t.random??((s=t.rng)==null?void 0:s.call(t))??w();if(n.length<16)throw new Error("Random bytes length must be >= 16");return n[6]=n[6]&15|64,n[8]=n[8]&63|128,m(n)}async function h(){const t=encodeURIComponent("https://api.upbit.com/v1/market/all?isDetails=true"),e=await fetch(`https://proxy-server-flax-rho.vercel.app/api/proxy?url=${t}`),o=await e.json();if(e.status!==200)throw new Error("Failed to fetch symbols list");return o.filter(s=>s.market.startsWith("KRW-"))}async function b(t,e){if(e.length===0){console.error("No symbols available.");return}console.log(`Fetching open prices for ${e.length} symbols...`),e.forEach(o=>{t[o.market]={price:0,color:"#FFFFFF",openPrice:0}})}function v(t,e){t.forEach(o=>{const{symbol:n,price:s,openPrice:l}=E(o);if(e[n]){const g=f(e[n].openPrice,s);e[n].price=s,e[n].color=g,l&&(e[n].openPrice=l)}})}function E(t){if("s"in t&&"c"in t)return{symbol:t.s,price:parseFloat(t.c)};if("code"in t&&"trade_price"in t)return{symbol:t.code,price:t.trade_price,openPrice:t.opening_price};throw new Error("Unknown data type")}function f(t,e){let o="#FFFFFF";return t<e?o="#f75467":t>e&&(o="#4386f9"),o}async function S(){try{const t=await fetch("https://ipapi.co/json/"),{country_code:e}=await t.json();return e!=="US"}catch(t){return console.error("Failed to detect country from IP:",t),!1}}function _(t,e){const o=[];for(let n=0;n<t.length;n+=e)o.push(t.slice(n,n+e));return o}async function x(t){const e=t.join(","),o=encodeURIComponent(`https://api.upbit.com/v1/ticker?markets=${e}`);return(await fetch(`https://proxy-server-flax-rho.vercel.app/api/proxy?url=${o}`)).json()}async function I(t){const e=_(t,100);return(await Promise.all(e.map(x))).flat()}const R=self,i=[],r={};let u=[],a=null;const P=()=>{a=new WebSocket("wss://api.upbit.com/websocket/v1/ticker"),a.binaryType="arraybuffer",a.onopen=()=>{console.log("Connected"),(async()=>{const e=await h();u=e,i.forEach(o=>{o.postMessage({type:"upbit_symbol_list",data:e})}),b(r,e).then(()=>{const o=[{ticket:F()},{type:"ticker",codes:Object.keys(r)}];a==null||a.send(JSON.stringify(o))})})()},a.onmessage=t=>{const o=new TextDecoder("utf-8").decode(t.data),n=JSON.parse(o);try{v([n],r)}catch(s){i.forEach(l=>{l.postMessage(`upbit 데이터 정리 오류: ${s}`)})}i.forEach(s=>{s.postMessage({type:"UpbitsymbolData",data:{...r[n.code],symbol:n.code}})})},a.onclose=()=>{i.forEach(t=>{t.postMessage("연결 끊김")})}};R.onconnect=t=>{const e=t.ports[0];i.push(e),e.onmessage=o=>{console.log("Received from client:",o.data)},u.length>0&&e.postMessage({type:"upbit_symbol_list",data:u}),Object.keys(r).length>0&&e.postMessage({type:"UpbitsymbolData",data:r}),i.forEach(o=>{o.postMessage("유저가 추가됨")}),e.start()};const d=t=>{I(t).then(e=>{e.forEach(o=>{const n=r[o.market];n.openPrice=o.opening_price,n.price=o.trade_price,n.color=f(o.opening_price,o.trade_price)})}),i.forEach(e=>{e.postMessage({type:"UpbitRestsymbolData",data:r})})},j=(t,e=1e3)=>{d(t),setInterval(()=>{d(t)},e)},D=async()=>{if(await S())P();else{const e=await h();i.forEach(n=>{n.postMessage({type:"upbit_symbol_list",data:e})}),await b(r,e);const o=Object.keys(r);j(o)}};D();
