(function(){"use strict";async function y(){try{const o=await fetch("https://api.upbit.com/v1/market/all?isDetails=true"),e=await o.json();if(o.status!==200)throw new Error("Failed to fetch symbols list");return e.filter(s=>s.market.startsWith("KRW-"))}catch(o){return console.error("Error fetching symbols list:",o),[]}}async function h(o){const e=await y();if(e.length===0){console.error("No symbols available.");return}console.log(`Fetching open prices for ${e.length} symbols...`),e.forEach(n=>{o[n.market]={price:0,color:"#FFFFFF",openPrice:0}})}function d(o,e){o.forEach(n=>{const{symbol:s,price:r,openPrice:l}=u(n);if(e[s]){let i="#FFFFFF";e[s].openPrice<r?i="#f75467":e[s].openPrice>r&&(i="#4386f9"),e[s].price=r,e[s].color=i,l&&(e[s].openPrice=l)}})}function u(o){if("s"in o&&"c"in o)return{symbol:o.s,price:parseFloat(o.c)};if("code"in o&&"trade_price"in o)return{symbol:o.code,price:o.trade_price,openPrice:o.opening_price};throw new Error("Unknown data type")}const g=self,a=[],c={};let t=null,f=!1,p=0;const b=o=>{t=new WebSocket("wss://api.upbit.com/websocket/v1/ticker"),t.binaryType="arraybuffer",t.onopen=()=>{console.log("Connected"),h(c).then(()=>{const e=[{ticket:"UNIQUE_TICKET12312432q153453245234543"},{type:"ticker",codes:Object.keys(c),is_only_snapshot:o}];t==null||t.send(JSON.stringify(e))})},t.onmessage=e=>{const s=new TextDecoder("utf-8").decode(e.data),r=JSON.parse(s);try{d([r],c)}catch{a.forEach(i=>{i.postMessage("upbit 데이터 정리 오류")})}a.forEach(l=>{l.postMessage({type:"UpbitsymbolData",data:{...c[r.code],symbol:r.code}})}),f===!1&&(p++,p===Object.keys(c).length&&(f=!0,t==null||t.close(),b(!1)))},t.onclose=()=>{a.forEach(e=>{e.postMessage("연결 끊김")})}};g.onconnect=o=>{const e=o.ports[0];a.push(e),e.onmessage=n=>{console.log("Received from client:",n.data)},Object.keys(c).length>0&&e.postMessage({type:"symbolData",data:c}),a.forEach(n=>{n.postMessage("유저가 추가됨")}),e.start()},b(!0)})();
