let a="";function h(e,o){e.forEach(n=>{const{symbol:s,price:r,openPrice:t}=w(n);if(o[s]){const c=b(o[s].openPrice,r);o[s].price=r,o[s].color=c,t&&(o[s].openPrice=t)}})}function w(e){if("s"in e&&"c"in e)return{symbol:e.s,price:parseFloat(e.c)};if("code"in e&&"trade_price"in e)return{symbol:e.code,price:e.trade_price,openPrice:e.opening_price};throw new Error("Unknown data type")}function b(e,o){let n="#FFFFFF";return e<o?n="#f75467":e>o&&(n="#4386f9"),n}async function f(){if(a.length===0)try{const e=await fetch("https://proxy-server-flax-rho.vercel.app/api/proxy?locale=find"),{country:o}=await e.json();return a=o,o==="US"}catch(e){return console.error("Failed to detect country from IP:",e),!1}else return a==="US"}const g="wss://stream.binance.com:9443/ws/!ticker@arr",u="https://api.binance.com/api/v3",y="https://api.binance.us/api/v3";async function d(){try{const e=await f(),n=await(await fetch(`${e?y:u}/exchangeInfo`)).json();if(!n.symbols)throw new Error("Failed to fetch symbols list");return n.symbols.filter(r=>r.symbol.endsWith("USDT")&&r.status==="TRADING").map(r=>r.symbol)}catch(e){return console.error("Error fetching symbols list:",e),[]}}async function m(e){const n=`${await f()?y:u}/klines?symbol=${e}&interval=1d&limit=2`;try{const r=await(await fetch(n)).json();if(!Array.isArray(r)||r.length<2)throw new Error(`No sufficient data for ${e}`);const t=r.length>=2?r[1][1]:r[0][1],c=r.length>=2?r[1][4]:r[0][4];return{symbol:e,openPrice:t,curPrice:c}}catch(s){return console.error(`Error fetching data for ${e}:`,s),{symbol:e,openPrice:null,curPrice:null}}}async function F(e){const o=await d();if(o.length===0){console.error("No symbols available.");return}console.log(`Fetching open prices for ${o.length} symbols...`),(await Promise.all(o.map(m))).forEach(s=>{let r="#FFFFFF";const t=parseFloat(s.curPrice),c=parseFloat(s.openPrice);c<t?r="#f75467":c>t&&(r="#4386f9"),e[s.symbol]={price:t,color:r,openPrice:c}})}const l={};let i=null;F(l);const p=e=>{i=new WebSocket(e??g),i.onmessage=o=>{const n=JSON.parse(o.data),s=Array.from(n).filter(r=>r.s.includes("USDT"));try{h(s,l)}catch(r){self.postMessage(`데이터 정리 오류: ${r}`)}self.postMessage({type:"symbolData",data:l})},i.onclose=()=>{self.postMessage("연결 끊김")}};self.onmessage=()=>{};const P=async()=>{await f()?p("wss://stream.binance.us:9443/ws/!ticker@arr"):p()};P();
