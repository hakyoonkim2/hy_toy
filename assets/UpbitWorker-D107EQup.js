const r=[];for(let e=0;e<256;++e)r.push((e+256).toString(16).slice(1));function g(e,t=0){return(r[e[t+0]]+r[e[t+1]]+r[e[t+2]]+r[e[t+3]]+"-"+r[e[t+4]]+r[e[t+5]]+"-"+r[e[t+6]]+r[e[t+7]]+"-"+r[e[t+8]]+r[e[t+9]]+"-"+r[e[t+10]]+r[e[t+11]]+r[e[t+12]]+r[e[t+13]]+r[e[t+14]]+r[e[t+15]]).toLowerCase()}let a;const m=new Uint8Array(16);function U(){if(!a){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");a=crypto.getRandomValues.bind(crypto)}return a(m)}const k=typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto);var u={randomUUID:k};function w(e,t,n){var c;if(u.randomUUID&&!e)return u.randomUUID();e=e||{};const o=e.random??((c=e.rng)==null?void 0:c.call(e))??U();if(o.length<16)throw new Error("Random bytes length must be >= 16");return o[6]=o[6]&15|64,o[8]=o[8]&63|128,g(o)}async function d(){const e=encodeURIComponent("https://api.upbit.com/v1/market/all?isDetails=true"),t=await fetch(`https://proxy-server-flax-rho.vercel.app/api/proxy?url=${e}`),n=await t.json();if(t.status!==200)throw new Error("Failed to fetch symbols list");return n.filter(c=>c.market.startsWith("KRW-"))}async function h(e,t){if(t.length===0){console.error("No symbols available.");return}console.log(`Fetching open prices for ${t.length} symbols...`),t.forEach(n=>{e[n.market]={price:0,color:"#FFFFFF",openPrice:0}})}let l="";function x(e,t){e.forEach(n=>{const{symbol:o,price:c,openPrice:p}=F(n);if(t[o]){const b=f(t[o].openPrice,c);t[o].price=c,t[o].color=b,p&&(t[o].openPrice=p)}})}function F(e){if("s"in e&&"c"in e)return{symbol:e.s,price:parseFloat(e.c)};if("code"in e&&"trade_price"in e)return{symbol:e.code,price:e.trade_price,openPrice:e.opening_price};throw new Error("Unknown data type")}function f(e,t){let n="#FFFFFF";return e<t?n="#f75467":e>t&&(n="#4386f9"),n}async function v(){if(l.length===0)try{const e=await fetch("https://proxy-server-flax-rho.vercel.app/api/proxy?locale=find"),{country:t}=await e.json();return l=t,t==="US"}catch(e){return console.error("Failed to detect country from IP:",e),!1}else return l==="US"}function S(e,t){const n=[];for(let o=0;o<e.length;o+=t)n.push(e.slice(o,o+t));return n}async function I(e){const t=e.join(","),n=encodeURIComponent(`https://api.upbit.com/v1/ticker?markets=${t}`);return(await fetch(`https://proxy-server-flax-rho.vercel.app/api/proxy?url=${n}`)).json()}async function P(e){const t=S(e,100);return(await Promise.all(t.map(I))).flat()}const i={};let s=null;const R=()=>{s=new WebSocket("wss://api.upbit.com/websocket/v1/ticker"),s.binaryType="arraybuffer",s.onopen=()=>{console.log("Connected"),(async()=>{const t=await d();self.postMessage({type:"upbit_symbol_list",data:t}),h(i,t).then(()=>{const n=[{ticket:w()},{type:"ticker",codes:Object.keys(i)}];s==null||s.send(JSON.stringify(n))})})()},s.onmessage=e=>{const n=new TextDecoder("utf-8").decode(e.data),o=JSON.parse(n);try{x([o],i)}catch(c){self.postMessage(`upbit 데이터 정리 오류: ${c}`)}self.postMessage({type:"UpbitsymbolData",data:{...i[o.code],symbol:o.code}})},s.onclose=()=>{self.postMessage("연결 끊김")}},y=e=>{P(e).then(t=>{t.forEach(n=>{const o=i[n.market];o.openPrice=n.opening_price,o.price=n.trade_price,o.color=f(n.opening_price,n.trade_price)})}),self.postMessage({type:"UpbitRestsymbolData",data:i})},_=(e,t=1e3)=>{y(e),setInterval(()=>{y(e)},t)},D=async()=>{if(await v())R();else{const t=await d();self.postMessage({type:"upbit_symbol_list",data:t}),await h(i,t);const n=Object.keys(i);_(n)}};D();
