(function(){"use strict";const p="wss://stream.binance.com:9443/ws/!ticker@arr",f="https://api.binance.com/api/v3";async function h(){try{const r=await(await fetch(`${f}/exchangeInfo`)).json();if(!r.symbols)throw new Error("Failed to fetch symbols list");return r.symbols.filter(e=>e.symbol.endsWith("USDT")&&e.status==="TRADING").map(e=>e.symbol)}catch(o){return console.error("Error fetching symbols list:",o),[]}}async function y(o){const r=`${f}/klines?symbol=${o}&interval=1d&limit=2`;try{const e=await(await fetch(r)).json();if(!Array.isArray(e)||e.length<2)throw new Error(`No sufficient data for ${o}`);const n=e.length>=2?e[1][1]:e[0][1],t=e.length>=2?e[1][4]:e[0][4];return{symbol:o,openPrice:n,curPrice:t}}catch(s){return console.error(`Error fetching data for ${o}:`,s),{symbol:o,openPrice:null,curPrice:null}}}async function u(o){const r=await h();if(r.length===0){console.error("No symbols available.");return}console.log(`Fetching open prices for ${r.length} symbols...`),(await Promise.all(r.map(y))).forEach(e=>{let n="#FFFFFF";const t=parseFloat(e.curPrice),c=parseFloat(e.openPrice);c<t?n="#f75467":c>t&&(n="#4386f9"),o[e.symbol]={price:t,color:n,openPrice:c}})}function b(o,r){o.forEach(s=>{const{symbol:e,price:n,openPrice:t}=g(s);if(r[e]){let c="#FFFFFF";r[e].openPrice<n?c="#f75467":r[e].openPrice>n&&(c="#4386f9"),r[e].price=n,r[e].color=c,t&&(r[e].openPrice=t)}})}function g(o){if("s"in o&&"c"in o)return{symbol:o.s,price:parseFloat(o.c)};if("code"in o&&"trade_price"in o)return{symbol:o.code,price:o.trade_price,openPrice:o.opening_price};throw new Error("Unknown data type")}const d=self,a=[],i={};let l=null;u(i);const m=()=>{l=new WebSocket(p),l.onmessage=o=>{const r=JSON.parse(o.data),s=Array.from(r).filter(e=>e.s.includes("USDT"));try{b(s,i)}catch{a.forEach(n=>{n.postMessage("데이터 정리 오류")})}a.forEach(e=>{e.postMessage({type:"symbolData",data:i})})},l.onclose=()=>{a.forEach(o=>{o.postMessage("연결 끊김")})}};d.onconnect=o=>{const r=o.ports[0];a.push(r),r.onmessage=s=>{console.log("Received from client:",s.data)},Object.keys(i).length>0&&r.postMessage({type:"symbolData",data:i}),a.forEach(s=>{s.postMessage("유저가 추가됨")}),r.start()},m()})();
