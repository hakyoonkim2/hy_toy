(function(){"use strict";const o=[];for(let e=0;e<256;++e)o.push((e+256).toString(16).slice(1));function y(e,n=0){return(o[e[n+0]]+o[e[n+1]]+o[e[n+2]]+o[e[n+3]]+"-"+o[e[n+4]]+o[e[n+5]]+"-"+o[e[n+6]]+o[e[n+7]]+"-"+o[e[n+8]]+o[e[n+9]]+"-"+o[e[n+10]]+o[e[n+11]]+o[e[n+12]]+o[e[n+13]]+o[e[n+14]]+o[e[n+15]]).toLowerCase()}let l;const b=new Uint8Array(16);function m(){if(!l){if(typeof crypto>"u"||!crypto.getRandomValues)throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");l=crypto.getRandomValues.bind(crypto)}return l(b)}var p={randomUUID:typeof crypto<"u"&&crypto.randomUUID&&crypto.randomUUID.bind(crypto)};function g(e,n,s){var c;if(p.randomUUID&&!e)return p.randomUUID();e=e||{};const t=e.random??((c=e.rng)==null?void 0:c.call(e))??m();if(t.length<16)throw new Error("Random bytes length must be >= 16");return t[6]=t[6]&15|64,t[8]=t[8]&63|128,y(t)}async function h(){try{const e=encodeURIComponent("https://api.upbit.com/v1/market/all?isDetails=true"),n=await fetch(`/api/proxy?url=${e}`),s=await n.json();if(n.status!==200)throw new Error("Failed to fetch symbols list");return s.filter(c=>c.market.startsWith("KRW-"))}catch(e){throw e}}async function U(e){const n=await h();if(n.length===0){console.error("No symbols available.");return}console.log(`Fetching open prices for ${n.length} symbols...`),n.forEach(s=>{e[s.market]={price:0,color:"#FFFFFF",openPrice:0}})}function f(e,n){e.forEach(s=>{const{symbol:t,price:c,openPrice:a}=w(s);if(n[t]){let u="#FFFFFF";n[t].openPrice<c?u="#f75467":n[t].openPrice>c&&(u="#4386f9"),n[t].price=c,n[t].color=u,a&&(n[t].openPrice=a)}})}function w(e){if("s"in e&&"c"in e)return{symbol:e.s,price:parseFloat(e.c)};if("code"in e&&"trade_price"in e)return{symbol:e.code,price:e.trade_price,openPrice:e.opening_price};throw new Error("Unknown data type")}const d=[],i={};let r=null;(()=>{r=new WebSocket("wss://api.upbit.com/websocket/v1/ticker"),r.binaryType="arraybuffer",r.onopen=()=>{console.log("Connected"),U(i).then(()=>{const e=[{ticket:g()},{type:"ticker",codes:Object.keys(i)}];r==null||r.send(JSON.stringify(e))})},r.onmessage=e=>{const s=new TextDecoder("utf-8").decode(e.data),t=JSON.parse(s);try{f([t],i)}catch{d.forEach(a=>{a.postMessage("upbit 데이터 정리 오류")})}d.forEach(c=>{c.postMessage({type:"UpbitsymbolData",data:{...i[t.code],symbol:t.code}})})},r.onclose=()=>{d.forEach(e=>{e.postMessage("연결 끊김")})}})()})();
